powerdf <- data.frame(expand.grid(beta=seq(0, 16, by=0.1), sigma=12, n=100, m=seq(10, 30, by=5)))#
powerdf$visual <- ldply(1:nrow(powerdf), function(x) {#
mean(replicate(10, with(powerdf, generate_visual_power(n[x], beta=beta[x], sigma=sigma[x], m=m[x]))))#
})$V1#
powerdf$theoretical <- ldply(1:nrow(powerdf), function(x) {#
with(powerdf, calculate_theoretical_power(n[x], beta=beta[x], sigma=sigma[x]))#
})$V1#
#
qplot(beta, theoretical, geom="line", data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1) + geom_text(aes(label=expression("m"==m, substitute(m)), x=15, y=visual), data=subset(powerdf, beta==15))
library(MASS)
generate_visual_power <- function(n,beta,sigma, m=20){#
age <- rpois(n,lambda=30)#
grp <- factor(sample(c("A","B"), size=n, replace=T))#
X <- model.matrix(~age + factor(grp))#
sdbeta <- sigma *sqrt(ginv(t(X) %*% X)[3,3])#
ts <- abs(rt(5000, ncp=beta/sdbeta, df=n-3))#
pvals <- 2*pt(ts, n-3, lower.tail=FALSE)#
pow <- mean(pbeta(pvals, shape1=1, shape2=m-1, lower.tail=FALSE))#
return(pow)#
}#
calculate_theoretical_power <- function (beta, n, sigma){#
alpha <- 0.05#
beta_not <- 0#
se_beta <- sigma/sqrt(n*(.5^2))  #
mu <- beta/se_beta#
alpha <- alpha/2#
t_n <- qt(p=1-alpha,df=n-3)#
res <- pt(q=-t_n, df=n-3, ncp=mu)-pt(q=t_n, df=n-3, ncp=mu)+1#
return(res)#
}#
powerdf <- data.frame(expand.grid(beta=seq(0, 16, by=0.1), sigma=12, n=100, m=seq(10, 30, by=5)))#
powerdf$visual <- ldply(1:nrow(powerdf), function(x) {#
mean(replicate(10, with(powerdf, generate_visual_power(n[x], beta=beta[x], sigma=sigma[x], m=m[x]))))#
})$V1#
powerdf$theoretical <- ldply(1:nrow(powerdf), function(x) {#
with(powerdf, calculate_theoretical_power(n[x], beta=beta[x], sigma=sigma[x]))#
})$V1#
#
qplot(beta, theoretical, geom="line", data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1) + geom_text(aes(label=expression("m"==m, substitute(m)), x=15, y=visual), data=subset(powerdf, beta==15))
qplot(beta, theoretical, geom="line", data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1)
qplot(beta, theoretical, geom="line", linetype=2, data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1)
qplot(beta, theoretical, geom="line", linetype=I(2), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(2), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1)
eom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==2), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==2), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==2), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
subset(powerdf, m==2)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=powerdf) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=subset(powerdf, m %in% c(10, 20, 30)) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=subset(powerdf, m %in% c(10, 20, 30))) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE)
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=subset(powerdf, m %in% c(10, 20, 30))) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE) + scale_line(type=c(1,2))
qplot(beta, theoretical, geom="line", linetype=I(2), size=I(1), data=subset(powerdf, m %in% c(10, 20, 30))) + ylab("Power") + geom_smooth(aes(y=visual, group=m, colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + geom_smooth(aes(y=visual, group=m, colour=m), subset(powerdf, m==20), size=1, fill=NA, method="loess", span=0.1, show.guide=FALSE) + scale_colour_gradient(breaks=c(10,20,30))
powerdf <- data.frame(expand.grid(beta=seq(0, 16, by=0.1), sigma=12, n=100, m=seq(10, 30, by=5)))#
powerdf$power <- ldply(1:nrow(powerdf), function(x) {#
mean(replicate(10, with(powerdf, generate_visual_power(n[x], beta=beta[x], sigma=sigma[x], m=m[x]))))#
})$V1
powerdf <- data.frame(expand.grid(beta=seq(0, 16, by=0.1), sigma=12, n=100, m=seq(10, 30, by=5), test="visual"))#
powerdf$power <- ldply(1:nrow(powerdf), function(x) {#
mean(replicate(10, with(powerdf, generate_visual_power(n[x], beta=beta[x], sigma=sigma[x], m=m[x]))))#
})$V1#
#
power2 <- data.frame(expand.grid(beta=seq(0, 16, by=0.1), sigma=12, n=100, m=NA, test="theoretical"))#
power2$power <- ldply(1:nrow(power2), function(x) {#
with(powerdf, calculate_theoretical_power(n[x], beta=beta[x], sigma=sigma[x]))#
})$V1
powerdf <- rbind(powerdf, power2)
ggplot(aes(beta, power, group=m, linetype=test), data=powerdf) + geom_line()
ggplot(aes(beta, power, group=m, linetype=test), data=powerdf) + #
geom_line(data=subset(powerdf, test=="theoretical")) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30))
ggplot(aes(beta, power, group=m, linetype=test), data=powerdf) + #
geom_line(data=subset(powerdf, test=="theoretical"))
ggplot(aes(beta, power, group=m, linetype=test), data=powerdf) + #
geom_line(data=subset(powerdf, test=="theoretical")) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1)
levels(powerdf$test)
ggplot(aes(beta, power, group=m, linetype=test), data=powerdf) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30))
powerdf$emphasize <- (powerdf$m==20) | (powerdf$test=="theoretical")
ggplot(aes(beta, power, group=m, linetype=test, size=emphasize), data=powerdf) +
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) +
scale_colour_gradient("Lineup size m", breaks=c(10,20,30))
ggplot(aes(beta, power, group=m, linetype=test, size=emphasize), data=powerdf) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30)) + #
scale_line_identity()
powerdf$emphasize <- 0.5 + 0.5*((powerdf$m==20) | (powerdf$test=="theoretical"))
powerdf$emphasize <- 0.5 + ((powerdf$m==20) | (powerdf$test=="theoretical"))
ggplot(aes(beta, power, group=m, linetype=test, size=emphasize), data=powerdf) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30)) + #
scale_size_identity()
ggplot(aes(beta, power, group=m, linetype=test, size=emphasize), data=powerdf) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30)) + #
scale_size_identity() + #
scale_linetype_discrete("Testing procedure")
scale_linetype_discrete("Test")
ggplot(aes(beta, power, group=m, linetype=test, size=emphasize), data=powerdf) + #
geom_smooth(aes(colour=m), alpha=0.5, fill=NA, method="loess", span=0.1) + #
scale_colour_gradient("Lineup size m", breaks=c(10,20,30)) + #
scale_size_identity() + #
scale_linetype_discrete("Test")
ggsave("images/power_expected.pdf")
n <- 100#
sd <- 12#
delta <- seq(0, 10, by=0.05)#
#
effect <- delta/sd#
power <- power.t.test(n=n/2, effect, sd=1, sig.level=0.05, strict=TRUE)$power#
m <- 20#
vpower <- function(pd, m=20) {#
(1 - pd)^(m-1)#
}#
vp <- data.frame(expand.grid(effect=effect, m=seq(5,35, by=5)))#
vp$pd <- 2*pt(vp$effect*sd, n-2, lower.tail=FALSE)#
vp$vpower <- with(vp, vpower(pd, m))#
#
qplot(effect, power, geom="line") + #
geom_line(aes(effect, vpower, group=m, colour=m), data=vp) +  #
geom_line(aes(effect, vpower, group=m, colour=m), size=1.5, data=subset(vp, m==20), show_guide=FALSE)+#
geom_text(aes(x=0.65, y= 0.75, label="UMP"), size=4,  data=data.frame()) + #
geom_text(aes(x=0.35, y= 0.85, label="Theoretical\nVisual Power"), size=4,  data=data.frame()) +#
xlab(label=expression(effect == beta/sigma))
powerdf <- data.frame(expand.grid(m = 5:50,#
pb=c(c(0.01, 0.001, 0.0001), seq(0.05,0.25, by=0.05))))#
#
powerdf$power <- with(powerdf, (1-pb)^(m-1))#
#
K <- 10#
ggplot(aes(x=m, power,  group=pb, colour=pb), data=powerdf) + geom_line(aes(m, 1/m), colour="grey30", lty=2) + geom_text(aes(label=sprintf("%.2f", pb), show_guide=FALSE), data=subset(powerdf, m==5), hjust=1.1) + xlim(c(0,50)) + scale_colour_gradient(name=expression(p[B])) + geom_ribbon(aes(x=m, ymin=1/m-1.96*sqrt(1/m*(m-1)/m)/K, ymax=1/m+1.96*sqrt(1/m*(m-1)/m)/K), fill="grey80", lty=0, alpha=0.1) +#
geom_line()
powerdf <- data.frame(expand.grid(m = seq(10,30, by=5),#
pb=seq(0.001, 0.25, by=0.001))))
powerdf <- data.frame(expand.grid(m = seq(10,30, by=5),#
pb=seq(0.001, 0.25, by=0.001)))
powerdf$power <- with(powerdf, (1-pb)^(m-1))#
#
K <- 10
ggplot(aes(x=pb, power,  group=m), data=powerdf) + geom_line()
ggplot(aes(x=m, power,  group=pb, colour=pb), data=powerdf) + geom_line(aes(m, 1/m), colour="grey30", lty=2) + geom_text(aes(label=sprintf("%.2f", pb), show_guide=FALSE), data=subset(powerdf, m==5), hjust=1.1) + xlim(c(0,50)) + scale_colour_gradient(name=expression(p[B])) + geom_ribbon(aes(x=m, ymin=1/m-1.96*sqrt(1/m*(m-1)/m)/K, ymax=1/m+1.96*sqrt(1/m*(m-1)/m)/K), fill="grey80", lty=0, alpha=0.1) +#
geom_line()
K <- 10#
ggplot(aes(x=m, power,  group=pb, colour=pb), data=powerdf) + geom_line(aes(m, 1/m), colour="grey30", lty=2) + geom_text(aes(label=sprintf("%.2f", pb), show_guide=FALSE), data=subset(powerdf, m==5), hjust=1.1) + xlim(c(0,50)) + scale_colour_gradient(name=expression(p[B])) + geom_ribbon(aes(x=m, ymin=1/m-1.96*sqrt(1/m*(m-1)/m)/K, ymax=1/m+1.96*sqrt(1/m*(m-1)/m)/K), fill="grey80", lty=0, alpha=0.1) +#
geom_line()
ggplot(aes(x=pb, power,  group=m, colour=m), data=powerdf) + geom_line()
ggplot(aes(x=pb, power,  group=m, colour=m), data=powerdf) + geom_line() + geom_point(aes(x=1/m, y=power))
library(ggplot2)#
#
powerdf <- data.frame(expand.grid(m = 5:50,#
pb=c(seq(0.05,0.5, by=0.05), seq(0.25, 0.5, by=0.05))))#
#
powerdf$power <- with(powerdf, (1-pb)^(m-1))#
#
K <- 10#
ggplot(aes(x=m, power,  group=pb, colour=pb), data=powerdf) + geom_line(aes(m, 1/m), colour="grey30", lty=2) + geom_text(aes(label=sprintf("%.2f", pb), show_guide=FALSE), data=subset(powerdf, m==5), hjust=1.1) + xlim(c(0,50)) + scale_colour_gradient(name=expression(p[B])) + geom_ribbon(aes(x=m, ymin=1/m-1.96*sqrt(1/m*(m-1)/m)/K, ymax=1/m+1.96*sqrt(1/m*(m-1)/m)/K), fill="grey80", lty=0, alpha=0.1) +#
geom_line()
ggplot(aes(x=pb, m,  colour=pb), data=powerdf)
ggplot(aes(x=pb, m,  group = power, colour=pb), data=powerdf) + geom_line
ggplot(aes(x=pb, m,  group = power, colour=pb), data=powerdf) + geom_line()
ggplot(aes(x=pb, m,  group = power, colour=pb), data=powerdf) + geom_point()
ggplot(aes(x=pb, m,  group = power, colour=power), data=powerdf) + geom_point()
beta
betq <- 3
beta <- 3
sigma <- 12
n
age <- rpois(n,lambda=30)#
grp <- factor(sample(c("A","B"), size=n, replace=T))#
X <- model.matrix(~age + factor(grp))
sdbeta <- sigma *sqrt(ginv(t(X) %*% X)[3,3])
ts <- abs(rt(5000, ncp=beta/sdbeta, df=n-3))
pvals <- 2*pt(ts, n-3, lower.tail=FALSE)
head(pvals)
sum(pvals < replicate(5000, min(runif(19))))
mean(pvals < 1/m)
(1-mean(pvals))^19
(1-mean(pvals))^(1/19)
mean(pvals < .2)
ts <- abs(rt(5000, ncp=beta/sdbeta, df=n-3))#
#
pvals <- 2*pt(ts, n-3, lower.tail=FALSE)
mean(pvals < .1)
mean(pvals < .05)
qplot(pbeta(pvals, shape1=1, shape2=m-1, lower.tail=FALSE))
mean(vpower(pvals, m=20))
mean(pbeta(pvals, shape1=1, shape2=m-1, lower.tail=FALSE))
mean(pvals)
pbeta(mean(pvals), shape1=1, shape2=m-1, lower.tail=FALSE)
pbeta(median(pvals), shape1=1, shape2=m-1, lower.tail=FALSE)
qqplot(pvals, rbeta(5000,1,19))
qqplot(pvals, rbeta(5000,1,190))
qplot(rbeta(5000,1,190), binwidth=0.01)
qplot(rbeta(5000,1,19), binwidth=0.01)
qplot(rbeta(5000,1,19), binwidth=0.01)+xlim(c(0,1))
qplot(rbeta(5000,1,4), binwidth=0.01)+xlim(c(0,1))
qplot(rbeta(5000,1,10), binwidth=0.01)+xlim(c(0,1))
qplot(pvals, binwidth=0.01)
qplot(rbeta(5000,.1,10), binwidth=0.01)+xlim(c(0,1))
qplot(rbeta(5000,.1,.19), binwidth=0.01)+xlim(c(0,1))
summary(pvals)
qplot(pvals)
length(pvals)
(1 - mean(pvals < runif(5000))) - mean(pvals)
qplot(log(pvals))
qqnorm(log(pvals)*c(-1,1)[1+rbinom(5000,1,0.5)])
mean(pvals < runif(5000))
mean(pvals < replicate(5000, min(runif(19)))
)
mean(pvals < replicate(5000, min(runif(19))))
mean(pvals < replicate(5000, min(runif(99))))
mean(pvals < replicate(5000, min(runif(2))))
1-(mean(pvals))^19
mean(1-pvals^19)
mean((1-pvals)^19)
x <- seq(0,1, by=0.01)
qplot(x, (1-x)^19)
qplot(x, 1-(1-x)^19)
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.2, by=0.001), m = seq(10, 30 by=5)))
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.2, by=0.001), m = seq(10, 30 by=5)))#
powerdf$power <- with(powerdf, pbeta(pd, 1, m-1))#
qplot(pd, power, data=powerdf)
head(powerdf)
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.2, by=0.001), m = seq(10, 30 by=5))
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.2, by=0.001), m = seq(10, 30, by=5)))
powerdf$power <- with(powerdf, pbeta(pd, 1, m-1))
powerdf$power <- with(powerdf, 1-pbeta(pd, 1, m-1))
powerdf$power <- with(powerdf, pbeta(pd, 1, m-1, lower.tail=FALSE))
qplot(pd, power, data=powerdf)
qplot(pd, power, data=powerdf) + ylab("Prob that data plot has lowest p-value")
qplot(pd, power, data=powerdf) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p_D))
qplot(pd, power, data=powerdf) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.15, by=0.001), m = seq(10, 30, by=5)))#
powerdf$power <- with(powerdf, pbeta(pd, 1, m-1, lower.tail=FALSE))#
qplot(pd, power, data=powerdf) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
qplot(pd, power, data=powerdf, geom="line", group=m) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
qplot(pd, power, data=powerdf, geom="line", group=m, size=1) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_point(aes(x=1/m, y=m), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_point(aes(x=1/m, y=1/m), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_point(aes(x=1/m, y=pbeta(1/m, 1, m-1)), data=data.frame(m=seq(10, 30, by=5)))
m <- seq(10,30, by=5)
pbeta(1/m, 1, m-1)
pbeta(1/m, 1, 30)
pbeta(1/m, 1, 29)
pbeta(1/m, 1, 24)
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_point(aes(x=1/m, y=1-pbeta(1/m, 1, m-1)), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_line(aes(x=1/m, y=1-pbeta(1/m, 1, m-1)), data=data.frame(m=(10:30)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_point(aes(x=1/m, y=1-pbeta(1/m, 1, m-1)), data=data.frame(m=(10:30)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_path(aes(x=1/m, y=1-pbeta(1/m, 1, m-1)), data=data.frame(m=(10:30)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_path(aes(x=1/m, y=1-pbeta(1/m, 1, m-1), group=1), data=data.frame(m=(10:30)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_path(aes(x=1/m, y=1-pbeta(1/m, 1, m-1), group=1), data=data.frame(m=(1:30)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + geom_path(aes(x=1/m, y=1-pbeta(1/m, 1, m-1), group=1), data=data.frame(m=(10:100)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1)) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
qplot(pd, power, data=powerdf, geom="line", group=m, size=I(1+(m==20))) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D]))
powerdf$size <- with(powerdf, I(1+(m==20)))
powerdf$size <- with(powerdf, I(.75+(m==20)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity()
powerdf <- data.frame(expand.grid(pd = seq(0.0001, 0.20, by=0.001), m = seq(10, 30, by=5)))#
powerdf$power <- with(powerdf, pbeta(pd, 1, m-1, lower.tail=FALSE))#
powerdf$size <- with(powerdf, I(.75+(m==20)))#
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity()
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_line(aes(x=c(1/m), linetype=factor(m)), data=data.frame(m=seq(10, 30, by=5)))
help(geom_vline)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_vline(aes(y=c(1/m), linetype=factor(m)), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=c(1/m), linetype=factor(m)), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=c(1/m)), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=1/m), data=data.frame(m=seq(10, 30, by=5)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=1/m), data=data.frame(m=0.1)))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=1/m), data=data.frame(m=0.1))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(aes(y=m), data=data.frame(m=0.1))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=0.1)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=c(0.1,0.05))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5)) +geom_text(aes(x=,y=, label=m), data=subset(powerdf, 4*pd - power == 0 ))
subset(powerdf, 4*pd - power == 0 )
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5)) +geom_text(aes(x=,y=, label=m), data=subset(powerdf, abs(4*pd - power) < 0.001 ))
subset(powerdf, abs(4*pd - power) < 0.001 )
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5)) +geom_text(aes(label=m), data=subset(powerdf, abs(4*pd - power) < 0.001 ))
subset(powerdf, abs(4*pd - power) < 0.002 )
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5)) +geom_text(aes(label=m), data=subset(powerdf, abs(4*pd - power) < 0.002 ))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() + geom_hline(y=1/seq(10,30, by=5)) +geom_text(aes(x=pd, y=power, label=m), data=subset(powerdf, abs(4*pd - power) < 0.002 ))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=m), data=subset(powerdf, abs(4*pd - power) < 0.002 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=as.character(m)), data=subset(powerdf, abs(4*pd - power) < 0.002 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=as.character(m)), data=powerdf)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=as.character(m)), size=5, data=powerdf)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=as.character(m)), size=5, data=subset(powerdf, abs(4*pd - power) < 0.002 ))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.01, y=power, label=as.character(m)), size=3, data=subset(powerdf, abs(4*pd - power) < 0.002 )) + geom_hline(y=1/seq(10,30, by=5))
powerdf$labels <- paste("m =",powerdf$m)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.01, y=power, label=labels), size=3, data=subset(powerdf, abs(4*pd - power) < 0.002 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.01, y=power, label=labels), size=3, data=subset(powerdf, abs(4*pd - power) < 0.003 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.01, y=power, label=labels), size=3, data=subset(powerdf, abs(4*pd - power) < 0.004 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.01, y=power, label=labels), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd+.005, y=power, label=labels), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels), size=3, hjust=0, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels), size=3, hjust=-1, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels), size=3, hjust=1, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
powerdf$hjust <- c(-1,1)[(powerdf$m >= 20) + 1]
powerdf$hjust <- c(-1,1)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(0,1)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(-0.001,1.001)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(-0.01,1.01)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(-0.05,1.05)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(-0.1,1.1)[(powerdf$m > 20) + 1]
powerdf$hjust <- c(-0.15,1.15)[(powerdf$m > 20) + 1]
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels, hjust=hjust), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5))
powerdf$power <- with(powerdf, pmax(power, 1/m))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels, hjust=hjust), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 ))
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels, hjust=hjust), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,30, by=5), linetype=2, alpha=0.3)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels, hjust=hjust), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(10,25, by=5), linetype=2, alpha=0.3)
qplot(pd, power, data=powerdf, geom="line", group=m, size=size) + ylab("Prob that data plot has lowest p-value") + xlab(expression(p[D])) + scale_size_identity() +geom_text(aes(x=pd, y=power, label=labels, hjust=hjust), size=3, data=subset(powerdf, abs(4*pd - power) < 0.005 )) + geom_hline(y=1/seq(15,30, by=5), linetype=2, alpha=0.3)
library(foreign)
help(package=foreign)
help(package=DBI)
library(maptools)
install.packages("rgeos")
install.packages("mdb-tools")
install.packages("mdbtools")
install.packages("Hmisc")
getinfo.shape("~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_l_ia169.shp")
xx <- readShapeLines("~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_l_ia169.shp")
getinfo.shape("~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_p_ia169.shp")
help(package="maptools")
?readShapeLines
xx <- readShapePoints("~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_p_ia169.shp")
xx <- readShapePoints("~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_p_ia169.shp", repair=T)
d <- mdb.get('~/Dropbox/Consulting Data/soil_ia169/spatial/soilmu_l_ia169.shp')
library(HMisc)
library(Hmisc)
d <- mdb.get('~/Dropbox/Consulting Data/soil_ia169/soildb_IA_2002.mdb')
ggsave(file="powerplot.pdf")
library(devtools)
has_devel()
help(has_devel)
library(RCurl)
library(testthat)
library(roxygen2)
.libPaths()
?Startup
de_mode()
dev_mode()
help(dev_mode)
getwd()
install("heiho")
install.packages(c("GGally", "MASS", "Matrix", "gdata", "knitr", "mgcv", "nlme", "rpart", "strucchange", "survival"))
show_news(GGally)
library(devtools)
show_news(GGally)
show_news("GGally")
library("GGally")
show_news("GGally")
install_github("lvplot")
install_github("productplots")
.libpath()
.lib.Path()
.libPath()
.lib.Paths()
.libPaths()
library(heiho)
?heiho
install.packages("test_that")
install.packages("testthat")
library(testthat)
?test_that
help(equals)
a <- 10
expect_that(a, equals(10))
expect_equal(a, 10)
expect_that(a, equals(9))
expect_match(a, 9)
expect_match(a, "9")
expect_match(a, "10")
conc <- read.csv("/Users/heike/Dropbox/Lineups-nf/turk5/data/turk5_1_15_5_12_16.csv")
sample <- subset(conc, .sample==16)
t.test(values~group, data=sample)
lineup.ops <- opts(legend.position="none", axis.ticks = theme_blank(), #axis.text.y = theme_blank(),
axis.text.x = theme_blank(), plot.margin=unit(c(0,0,0,0), "cm"))
ggplot(aes(x=values,   fill=factor(group)), data=sample) + geom_histogram(binwidth=25, alpha=0.5)+ xlab("")  + ylab("") + lineup.ops
library(ggplot2)
ggplot(aes(x=values,   fill=factor(group)), data=sample) + geom_histogram(binwidth=25, alpha=0.5)+ xlab("")  + ylab("") + lineup.ops
lineup.ops <- opts(legend.position="none", axis.ticks = theme_blank(), #axis.text.y = theme_blank(),
axis.text.x = theme_blank(), plot.margin=unit(c(0,0,0,0), "cm"))
# conc data:
require(grid)
# conc data:
conc <- read.csv("/Users/heike/Dropbox/Lineups-nf/turk5/data/turk5_1_15_5_12_16.csv")
sample <- subset(conc, .sample==16)
t.test(values~group, data=sample)
lineup.ops <- opts(legend.position="none", axis.ticks = theme_blank(), #axis.text.y = theme_blank(),
axis.text.x = theme_blank(), plot.margin=unit(c(0,0,0,0), "cm"))
ggplot(aes(x=values,   fill=factor(group)), data=sample) + geom_histogram(binwidth=25, alpha=0.5)+ xlab("")  + ylab("") + lineup.ops
alpha=0.5
ggplot(aes(x=factor(group), y=values, fill=factor(group), colour=factor(group)), data=sample)   + geom_boxplot(alpha=alpha) + coord_flip() + lineup.ops + xlab("")  + ylab("")
xx <- seq(0, 360, by=1)
yy <- rep(0.5, length=length(xx))
refdf <- data.frame(xx=xx, yy=yy)
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + geom_line(aes(x=xx, y=yy), size = .5, alpha=0.5, colour = "white", inherit.aes=FALSE, data=refdf) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
load("~/Dropbox/airports/data sets - 3 years/sea-all.rds")
flights_all$Wind_Direction<- factor(flights_all$Wind_Direction)
flights_all$Wind_Direction <- with(flights_all, reorder(Wind_Direction, WindDirDegrees, median, na.rm=T))
# check data quality
idx <- which(is.na(flights_all$Wind_SpeedMPH))
flights_all$WindDirDegrees[idx] <- NA
flights_all <- subset(flights_all, WindDirDegrees!=0)
#flights_all$Hour <- gsub(".* ([0-9]+):[0-9]+", "\\1", flights_all$wstamp)
#flights_all$Hour <- as.numeric(flights_all$Hour)
idx <- which(flights_all$Wind_SpeedMPH == -9999)
flights_all$Wind_SpeedMPH[idx] <- 0
flights_all$nf <- flights_all$nextflight
flights_sub <- subset(flights_all, (Hour >= 7) )
rm(flights_all)  # free up main memory
n <- nrow(flights_sub)
flights_sub$nf[flights_sub$nf>=8] <- 8
nf_data <- flights_sub[c("nf", "WindDirDegrees")]
#rain_data <- flights_sub[c("RAIN", "WindDirDegrees")]
rm(flights_sub) # free up more memory
#color palettes for euc and polar coordinates
seq7 <- scale_fill_manual(values = c("#00145D", "#283361", "#464F79", "#616992", "#7B82AB", "#9299C2" ,"#A5ADD5", "#B5BCE5", "#BDC4EE"))
#seq7rev <- scale_fill_manual(values = c("#BDC4EE","#B5BCE5","#A5ADD5","#9299C2", "#7B82AB","#616992", "#464F79", "#283361" , "#00145D"))
seq7rev <- scale_fill_manual(values = c("#B5BCE5","#A5ADD5","#9299C2", "#7B82AB","#616992", "#464F79", "#283361" ,"#1A2242", "#0D1224"))
getsample <- function(perc, data) {
n <- nrow(data)
return(data[sample(n, (n*perc/100)),])
}
library(ggplot2)
library(nullabor)
perc <- 2
flights_sample <- getsample(2, nf_data)
flights_sample$WindDirDegrees[flights_sample$WindDirDegrees == 360]<- 0
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + geom_line(aes(x=xx, y=yy), size = .5, alpha=0.5, colour = "white", inherit.aes=FALSE, data=refdf) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
X <- 0
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + geom_line(aes(x=xx, y=yy), size = .5, alpha=0.5, colour = "white", inherit.aes=FALSE, data=refdf) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
flights_sample <- getsample(8, nf_data)
flights_sample$WindDirDegrees[flights_sample$WindDirDegrees == 360]<- 0
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + geom_line(aes(x=xx, y=yy), size = .5, alpha=0.5, colour = "white", inherit.aes=FALSE, data=refdf) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
getwd()
setwd("~/papers/2012-infovis/comparing-designs/code")
ggsave(file="polar_line.pdf", width=4, height=4, dpi=75)
ggsave(file="Polar_Line.pdf", width=4, height=4, dpi=75)
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
ggsave(file="Polar_Noline.pdf", width=4, height=4, dpi=75)
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill", alpha=0.8) +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) + geom_hline(yintercept=0.5, size = .5, alpha=0.5, colour = "white") + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
ggsave(file="Euclid_Line.pdf", width=4, height=4, dpi=75)
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill", alpha=0.8) +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
ggsave(file="Euclid_Noline.pdf", width=4, height=4, dpi=75)
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill", alpha=0.8) +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
ggplot(flights_sample, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill", alpha=0.8) +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) + geom_hline(yintercept=0.5, size = .5, alpha=0.5, colour = "white") + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")
nf <- ldply(c(0,90,180,270), function(x) {
flights_sample$offset <- x
flights_sample$WindDirDegrees <- (flights_sample$WindDirDegrees+x)%%360
flights_sample
})
library(plyr)
nf <- ldply(c(0,90,180,270), function(x) {
flights_sample$offset <- x
flights_sample$WindDirDegrees <- (flights_sample$WindDirDegrees+x)%%360
flights_sample
})
ggplot(nf, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill", alpha=0.8) +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) + geom_hline(yintercept=0.5, size = .5, alpha=0.5, colour = "white") + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ") +facet_grid(.~offset)
setwd("../review/images/")
help(ggsave)
ggsave("euclid-offset.pdf", height=202, width=657, units="mm")
ggsave("euclid-offset.pdf", height=202/5, width=657/5, units="mm")
ggsave("euclid-offset.pdf", height=202/2, width=657/2, units="mm")
ggsave("euclid-offset.pdf", height=202/3, width=657/3, units="mm")
ggplot(nf, aes(x = (WindDirDegrees-1 + X)%%360, fill = factor(nf, levels = c(0:8)))) +
geom_bar(binwidth = 10, position="fill") +
scale_x_continuous(limits = c(0, 360), breaks=seq(0, 360, by=45), labels=c("N", "NE","E","SE","S","SW","W","NW","N")) +
coord_polar(start = 0) + geom_line(aes(x=xx, y=yy), size = .5, alpha=0.5, colour = "white", inherit.aes=FALSE, data=refdf) + opts(legend.position="none", plot.margin=unit(c(0,0,0,0), "cm")) +
seq7rev + labs(x = " ", y = " ")  +facet_grid(.~offset)
ggsave("polar-offset.pdf", height=202/3, width=657/3, units="mm")
suppressMessages(require(multcomp))
help(cld)
library(foreign)
